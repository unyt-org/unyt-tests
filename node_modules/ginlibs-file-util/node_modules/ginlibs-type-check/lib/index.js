'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function isString(v) {
  return typeof v === 'string';
}
function isFinite(v) {
  return v !== Infinity && v !== -Infinity;
}
function isNumber(v) {
  return typeof v === 'number' && !Number.isNaN(v) && isFinite(v);
}
function isNull(v) {
  return v === null;
}
function isUndefined(v) {
  return v === undefined;
}
function isBoolean(v) {
  return v === true || v === false;
}
function isObject(v) {
  return isThisType(v, 'Object');
}
function isArray(v) {
  return Array.isArray(v);
}
function isNilVal(v, ...args) {
  args.push(v);
  return args.every(it => isUndefined(it) || isNull(it));
}
function isNumeric(value) {
  return isString(value) && /^-{0,1}[0-9]+(\.{0,1}[0-9]+){0,1}(e{0,1}[0-9]+){0,1}$/.test(value);
}
function isFunc(v) {
  return typeof v === 'function';
}
function isPromise(v) {
  return v && isFunc(v.then) || isThisType(v, 'Promise');
}
function isThisType(val, type) {
  const valType = Object.prototype.toString.call(val);
  const trueType = valType.slice(8, valType.length - 1);
  return type === trueType;
}

exports.isArray = isArray;
exports.isBoolean = isBoolean;
exports.isFinite = isFinite;
exports.isFunc = isFunc;
exports.isNilVal = isNilVal;
exports.isNull = isNull;
exports.isNumber = isNumber;
exports.isNumeric = isNumeric;
exports.isObject = isObject;
exports.isPromise = isPromise;
exports.isString = isString;
exports.isThisType = isThisType;
exports.isUndefined = isUndefined;
