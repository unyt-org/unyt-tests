'use strict';

var path = require('path');
var fs = require('fs');
var shelljs = require('shelljs');
var glob = require('glob');
var chokidar = require('chokidar');
var os = require('os');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var shelljs__default = /*#__PURE__*/_interopDefaultLegacy(shelljs);
var glob__default = /*#__PURE__*/_interopDefaultLegacy(glob);
var chokidar__default = /*#__PURE__*/_interopDefaultLegacy(chokidar);
var os__default = /*#__PURE__*/_interopDefaultLegacy(os);

class NodeFile {
  constructor() {
    this.exist = filePath => {
      return fs__default['default'].existsSync(filePath);
    };

    this.write = (filePath, content) => {
      this.del(filePath);
      this.dir(path.dirname(filePath));
      fs__default['default'].writeFileSync(filePath, content);
      return true;
    };

    this.read = filePath => {
      if (!this.exist(filePath)) {
        return '';
      }

      return fs__default['default'].readFileSync(filePath, 'utf-8');
    };

    this.del = filePath => {
      if (!this.exist(filePath)) {
        return true;
      }

      return shelljs__default['default'].rm('-rf', filePath);
    };

    this.dir = dirPath => {
      if (!this.exist(dirPath)) {
        shelljs__default['default'].mkdir('-p', dirPath);
      }
    };

    this.copy = (file, dir) => {
      if (!this.exist(file)) {
        return;
      }

      this.del(path.join(dir, path.basename(file)));
      this.dir(dir);
      shelljs__default['default'].cp('-R', file, dir);
    };

    this.copyDir = (dir, newdir) => {
      if (!this.exist(dir)) {
        return;
      }

      this.del(newdir);
      this.dir(newdir);
      shelljs__default['default'].cp('-R', `${dir}/*`, newdir);
    };

    this.find = (cwd, pattern = '*') => {
      const filePaths = glob__default['default'].sync(pattern, {
        cwd
      }).map(f => path.join(cwd, f));
      return filePaths || [];
    };

    this.watch = (cwd, option) => {
      return chokidar__default['default'].watch(cwd, option);
    };

    this.tmpdir = () => {
      return os__default['default'].tmpdir();
    };
  }

}

var index = new NodeFile();

module.exports = index;
