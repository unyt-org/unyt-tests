'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var path = require('path');
var fsUtil = require('ginlibs-file-util');
var validateNpm = require('validate-npm-package-name');
var parser = require('@babel/parser');
var traverse = require('@babel/traverse');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var fsUtil__default = /*#__PURE__*/_interopDefaultLegacy(fsUtil);
var validateNpm__default = /*#__PURE__*/_interopDefaultLegacy(validateNpm);
var parser__default = /*#__PURE__*/_interopDefaultLegacy(parser);
var traverse__default = /*#__PURE__*/_interopDefaultLegacy(traverse);

const delRequireCache = rootFile => {
  const getAllDependJS = filePath => {
    const ext = path.extname(filePath);
    const jsFile = ext === '.js' ? filePath : `${filePath}.js`;
    const jsCont = fsUtil__default["default"].read(jsFile);
    const result = [jsFile.slice(0, jsFile.length - path.extname(jsFile).length)];
    const jsAst = parser__default["default"].parse(jsCont, {
      sourceType: 'module',
      plugins: ['typescript', 'jsx']
    });
    traverse__default["default"](jsAst, {
      ImportDeclaration(path$1) {
        var _a, _b, _c;

        const sourceVal = (_b = (_a = path$1 === null || path$1 === void 0 ? void 0 : path$1.node) === null || _a === void 0 ? void 0 : _a.source) === null || _b === void 0 ? void 0 : _b.value;
        const itFile = path.resolve(path.dirname(jsFile), sourceVal);

        if (((_c = validateNpm__default["default"](sourceVal)) === null || _c === void 0 ? void 0 : _c.validForNewPackages) || !sourceVal) {
          return;
        }

        Array.prototype.push.apply(result, getAllDependJS(itFile) || []);
      },

      VariableDeclarator(path$1) {
        traverse__default["default"](path$1.node, {
          CallExpression(cPath) {
            var _a, _b;

            const name = (_b = (_a = cPath === null || cPath === void 0 ? void 0 : cPath.node) === null || _a === void 0 ? void 0 : _a.callee) === null || _b === void 0 ? void 0 : _b.name;

            if (name !== 'require') {
              return;
            }

            traverse__default["default"](cPath.node, {
              StringLiteral(csPath) {
                var _a, _b;

                const csValue = (_a = csPath === null || csPath === void 0 ? void 0 : csPath.node) === null || _a === void 0 ? void 0 : _a.value;
                const itFile = path.resolve(path.dirname(jsFile), csValue);

                if (((_b = validateNpm__default["default"](csValue)) === null || _b === void 0 ? void 0 : _b.validForNewPackages) || !csValue) {
                  return;
                }

                Array.prototype.push.apply(result, getAllDependJS(`${itFile}.js`) || []);
              }

            }, cPath.scope, cPath.state, cPath.parentPath);
          }

        }, path$1.scope, path$1.state, path$1.parentPath);
      }

    });
    return result;
  };

  const allDepJS = getAllDependJS(rootFile);
  const delJSFiles = [];

  for (const itJS of allDepJS) {
    if (fsUtil__default["default"].exist(`${itJS}.js`)) {
      delete require.cache[require.resolve(itJS)];
      delJSFiles.push(itJS);
    }
  }

  return delJSFiles;
};

exports.delRequireCache = delRequireCache;
